# This file has been created with AiiDA v. 1.0.0b6
# If you use AiiDA for publication purposes, please cite:
# G. Pizzi, A. Cepellotti, R. Sabatini, N. Marzari, and B. Kozinsky,"AiiDA: automated interactive infrastructure and database for computational science", Comp. Mat. Sci 111, 218-230 (2016); https://doi.org/10.1016/j.commatsci.2015.09.013 - http://www.aiida.net.# calculation pk: 15886

import ase
import ase.io
import json
import numpy
from gpaw import GPAW as custom_calculator
from ase.optimize import QuasiNewton as custom_optimizer
from gpaw import PW
import os
from numpy import array
from numpy import array as ar

# This is a set
# of various pre-lines

atoms = ase.io.read('aiida_atoms.json')

calculator = custom_calculator(mode=PW(ecut=300), kpts=(2,2,2))
atoms.set_calculator(calculator)

optimizer = custom_optimizer(atoms, logfile='aiida_optimizer.log', alpha=0.9)
optimizer.run(fmax=0.05)

results = {}
results['total_energy'] = atoms.get_total_energy()
results['temperature'] = atoms.get_temperature()
results['forces'] = atoms.get_forces(apply_constraint=True)
results['masses'] = atoms.get_masses()

results['potential_energy'] = calculator.get_potential_energy()
results['spin_polarized'] = calculator.get_spin_polarized()
results['stress'] = calculator.get_stress(atoms)

for k,v in results.items():
    if isinstance(results[k],(numpy.matrix,numpy.ndarray)):
        results[k] = results[k].tolist()

# This is a set
# of various post-lines

with open('results.json', 'w') as f:
    json.dump(results,f)

atoms.write('aiida_out_atoms.json')

